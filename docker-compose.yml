version: "3.8"

services:
  # Frontend Service
  frontend:
    environment:
      REACT_APP_BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      OTEL_EXPORTER_OTLP_ENDPOINT: "https://api.honeycomb.io/"
      OTEL_EXPORTER_OTLP_HEADERS: "x-honeycomb-team=${HONEYCOMB_API_KEY}"
      OTEL_SERVICE_NAME: "cruddur_frontend"
      REACT_APP_AWS_PROJECT_REGION: "${AWS_DEFAULT_REGION}"
      REACT_APP_AWS_COGNITO_REGION: "${AWS_DEFAULT_REGION}"
      REACT_APP_AWS_USER_POOLS_ID: "${AWS_COGNITO_USER_POOL_ID}"
      REACT_APP_CLIENT_ID: "${AWS_COGNITO_USER_POOL_CLIENT_ID}"
    build: ./frontend-react-js
    container_name: ${APP_NAME}-frontend
    ports:
      - "3000:3000"
    healthcheck:
      test: npm --version || exit 1
      interval: 30s
      retries: 5
      start_period: 5s
      timeout: 10s
    volumes:
      - ./frontend-react-js:/frontend-react-js
      - /frontend-react-js/node_modules
    networks:
      - ${APP_NAME}-network

  # Backend Service
  backend:
    environment:
      # AWS_ENDPOINT_URL: "http://dynamodb-local:8000"
      # CONNECTION_URL: "${PROD_CONNECTION_URL}"
      CONNECTION_URL: "${DEV_CONNECTION_URL}"
      FRONTEND_URL: "https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      BACKEND_URL: "https://4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}"
      OTEL_EXPORTER_OTLP_ENDPOINT: "https://api.honeycomb.io/"
      OTEL_EXPORTER_OTLP_HEADERS: "x-honeycomb-team=${HONEYCOMB_API_KEY}"
      OTEL_SERVICE_NAME: "cruddur_backend"
      AWS_XRAY_URL: "*4567-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}*"
      AWS_XRAY_DAEMON_ADDRESS: "xray-daemon:2000"
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
      ROLLBAR_ACCESS_TOKEN: "${ROLLBAR_ACCESS_TOKEN}"
      AWS_COGNITO_USER_POOL_ID: "${AWS_COGNITO_USER_POOL_ID}"
      AWS_COGNITO_USER_POOL_CLIENT_ID: "${AWS_COGNITO_USER_POOL_CLIENT_ID}"
    build: ./backend-flask
    container_name: ${APP_NAME}-backend
    ports:
      - "4567:4567"
    volumes:
      - ./backend-flask:/backend-flask
    networks:
      - ${APP_NAME}-network

  # AWS X-Ray Daemon Service
  # xray-daemon:
  #   image: "amazon/aws-xray-daemon"
  #   environment:
  #     AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  #     AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  #     AWS_REGION: "${AWS_REGION}"
  #   command:
  #     - "xray -o -b xray-daemon:2000"
  #   container_name: xray-daemon
  #   ports:
  #     - 2000:2000/udp
  #   networks:
  #     - ${APP_NAME}-network
      
  # Database Service[Postgres]
  postgres-db:
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    container_name: postgres-db
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - ${APP_NAME}-network

  # Database Service[dynamodb_local]
  dynamodb-local:
    # we need to add root to get this working
    user: root
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    networks:
      - ${APP_NAME}-network

# Docker Networks
networks:
  cruddur-network:
    driver: bridge

# Docker Volumes
volumes:
  db:
    driver: local